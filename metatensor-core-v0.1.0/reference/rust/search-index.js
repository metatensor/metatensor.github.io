var searchIndex = JSON.parse('{\
"metatensor":{"doc":"Metatensor","t":"IDDDCDDDDDDDDDDDDDDLLKLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAFLLLLLLLLLLLLLLLLLLLLLLKLLKLKLLLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLKLLLLKLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRLLLLLLLLLLLLLLLLLLLLMMLMLMMLLLLLLLLLLLMMLLLLLLMDFFFFFFFFDGGFFFFFFFFDFFFFDGFFFFFFFFFFFFFDFMLLMMMLMLMMLMLLLLLLLLLLLLLLLLLLLLMDRLLFFLLMLLLLLMLLLLLFFFF","n":["Array","ArrayRef","ArrayRefMut","EmptyArray","Error","GradientsIter","GradientsMutIter","LabelValue","Labels","LabelsBuilder","LabelsFixedSizeIter","LabelsIter","LazyMetadata","TensorBlock","TensorBlockRef","TensorBlockRefMut","TensorMap","TensorMapIter","TensorMapIterMut","add","add_gradient","as_any","as_any","as_any","as_any","as_any_mut","as_any_mut","as_any_mut","as_array","as_array","as_array_mut","as_raw","as_raw","as_raw_mut","as_ref","as_ref","as_ref_mut","block","block_by_id","block_matching","block_mut_by_id","blocks","blocks_matching","blocks_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","c_api","c_api_install_dir","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","components","components","components","components_to_properties","contains","copy","copy","count","create","create","data","data","data","data_mut","deref","drop","drop","drop","empty","eq","eq","eq","equivalent","errors","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_raw","from_raw","from_raw","gradient","gradient_list","gradient_mut","gradients","gradients_mut","hash","i32","index","intersection","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_raw","io","is_empty","isize","iter","iter","iter_fixed_size","iter_mut","keys","keys_to_properties","keys_to_samples","len","len","len","len","len","len","move_samples_from","move_samples_from","names","new","new","new","new","new","new","new","new","next","next","next","next","next","next","partial_cmp","position","properties","properties","properties","reserve","reshape","reshape","samples","samples","samples","shape","shape","single","size","size","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","swap_axes","swap_axes","to_any","to_any","to_any_mut","to_array","to_array","to_array_mut","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_clone","try_clone","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union","usize","values","values","values","values_mut","MTS_BUFFER_SIZE_ERROR","MTS_INTERNAL_ERROR","MTS_INVALID_PARAMETER_ERROR","MTS_IO_ERROR","MTS_SERIALIZATION_ERROR","MTS_SUCCESS","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","copy","count","create","create","data","data","destroy","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","input","internal_ptr_","into","into","into","into","into","move_samples_from","move_samples_from","mts_array_t","mts_block","mts_block_add_gradient","mts_block_copy","mts_block_data","mts_block_free","mts_block_gradient","mts_block_gradients_list","mts_block_labels","mts_block_t","mts_create_array_callback_t","mts_data_origin_t","mts_disable_panic_printing","mts_get_data_origin","mts_labels_clone","mts_labels_create","mts_labels_free","mts_labels_intersection","mts_labels_position","mts_labels_set_user_data","mts_labels_t","mts_labels_union","mts_labels_user_data","mts_last_error","mts_register_data_origin","mts_sample_mapping_t","mts_status_t","mts_tensormap","mts_tensormap_block_by_id","mts_tensormap_blocks_matching","mts_tensormap_components_to_properties","mts_tensormap_copy","mts_tensormap_free","mts_tensormap_keys","mts_tensormap_keys_to_properties","mts_tensormap_keys_to_samples","mts_tensormap_load","mts_tensormap_load_buffer","mts_tensormap_save","mts_tensormap_save_buffer","mts_tensormap_t","mts_version","names","null","origin","origin","output","ptr","reshape","reshape","shape","shape","size","swap_axes","swap_axes","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","values","Error","LAST_RUST_ERROR","borrow","borrow_mut","check_ptr","check_status","clone","clone_into","code","fmt","fmt","from","from","into","message","to_owned","to_string","try_from","try_into","type_id","load","load_buffer","save","save_buffer"],"q":[[0,"metatensor"],[327,"metatensor::c_api"],[456,"metatensor::errors"],[476,"metatensor::io"]],"d":["The Array trait is used by metatensor to manage different …","Reference to a data array in metatensor-core","Mutable reference to a data array in metatensor-core","An implementation of the <code>Array</code> trait without any data.","","Iterator over parameter/<code>TensorBlockRef</code> pairs for all …","Iterator over parameter/<code>TensorBlockRefMut</code> pairs for all …","A single value inside a label.","A set of labels used to carry metadata associated with a …","Builder for <code>Labels</code>","Iterator over entries in a set of <code>Labels</code> as fixed size …","Iterator over <code>Labels</code> entries","Lazily accessed metadata inside a <code>TensorBlock</code>","A single block, containing both values &amp; optionally …","Reference to a <code>TensorBlock</code>","Mutable reference to a <code>TensorBlock</code>","<code>TensorMap</code> is the main user-facing struct of this library, …","Iterator over key/block pairs in a <code>TensorMap</code>","Iterator over key/block pairs in a <code>TensorMap</code>, with mutable …","Add a single <code>entry</code> to this set of labels.","Add a gradient with respect to <code>parameter</code> to this block.","Get the array as a <code>Any</code> reference","Get the underlying array as an <code>&amp;dyn Any</code> instance.","Get the underlying array as an <code>&amp;dyn Any</code> instance.","","Get the array as a mutable <code>Any</code> reference","Get the underlying array as an <code>&amp;mut dyn Any</code> instance.","","Get the data in this <code>ArrayRef</code> as a <code>ndarray::ArrayD</code>. This …","Get the data in this <code>ArrayRef</code> as a <code>ndarray::ArrayD</code>. This …","Get the data in this <code>ArrayRef</code> as a mutable reference to an …","Get the raw underlying <code>mts_array_t</code>","Get the raw underlying <code>mts_array_t</code>","Get a mutable reference to the raw underlying <code>mts_array_t</code>","Get a non mutable reference to this block","Get a non mutable reference to this block","Get a non mutable reference to this block","Get a reference to the block matching the given selection.","Get a reference to the block at the given <code>index</code> in this …","Get the index of the single block matching the given …","Get a mutable reference to the block at the given <code>index</code> in …","Get a reference to every blocks in this <code>TensorMap</code>","Get the index of blocks matching the given selection.","Get a mutable reference to every blocks in this <code>TensorMap</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Rust definition corresponding to metatensor-core C-API.","Path where the metatensor shared library has been built","","","","","","","","","","","","","","","","","","Get the components for this block","Get the components for this block","Get the components for this block","Move the given dimensions from the component labels to the …","Check whether the given <code>label</code> is part of this set of labels","Make a copy of this <code>array</code>","","Get the total number of entries in this set of labels","Create a new array with the same options as the current …","","Get the underlying data storage as a contiguous slice","","Get all the data and metadata inside this <code>TensorBlockRef</code> …","Get all the data and metadata inside this <code>TensorBlockRefMut</code>…","","","","","Create a set of <code>Labels</code> with the given names, containing no …","","","","","","Finish building the <code>Labels</code>","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Create a new set of <code>Labels</code> from a raw <code>mts_labels_t</code>.","Create a new <code>TensorMap</code> from a raw pointer.","Create a new <code>ArrayRef</code> from the given raw <code>mts_array_t</code>","Get the data and metadata for the gradient with respect to …","Get the full list of gradients in this block","Get a mutable reference to the data and metadata for the …","Get an iterator over parameter/<code>TensorBlockRef</code> pairs for …","Get an iterator over parameter/<code>TensorBlockRefMut</code> pairs for …","","Get the integer value of this <code>LabelValue</code> as an i32","","Take the intersection of self with <code>other</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Extract the underlying raw pointer.","Input/Output facilities for storing <code>TensorMap</code> on disk","Check if this set of Labels is empty (contains no entry)","Get the integer value of this <code>LabelValue</code> as an isize","Iterate over the entries in this set of labels","Get an iterator over the keys and associated blocks","Iterate over the entries in this set of labels as …","Get an iterator over the keys and associated blocks, with …","Get the keys defined in this <code>TensorMap</code>","Merge blocks with the same value for selected keys …","Merge blocks with the same value for selected keys …","","","","","","","Set entries in <code>self</code> taking data from the <code>input</code> array.","","Get the names of the entries/columns in this set of labels","Create a new set of Labels with the given names and values.","Create a new <code>LazyMetadata</code> with the given initialization …","Create a new <code>TensorMap</code> with the given keys and blocks.","Create a new <code>ArrayRefMut</code> from the given raw <code>mts_array_t</code>","Create a new <code>EmptyArray</code> with the given shape.","Create a <code>LabelValue</code> with the given <code>value</code>","Create a new empty <code>LabelsBuilder</code> with the given <code>names</code>","Create a new <code>TensorBlock</code> containing the given data, …","","","","","","","","Get the position (i.e. row index) of the given label in …","Get the properties for this block","Get the properties for this block","Get the properties for this block","Reserve space for <code>additional</code> other entries in the labels.","Change the shape of the array to the given <code>shape</code>","","Get the samples for this block","Get the samples for this block","Get the samples for this block","Get the shape of the array","","Create a set of <code>Labels</code> containing a single entry, to be …","Get the number of entries/named values in a single label","Get the number of labels in a single value","","","","","","","Swap the axes <code>axis_1</code> and <code>axis_2</code> in this array","","Get a reference to the underlying array as an <code>&amp;dyn Any</code> …","Get the underlying array as an <code>&amp;dyn Any</code> instance, re-using …","Get the underlying array as an <code>&amp;mut dyn Any</code> instance, …","Transform this <code>ArrayRef</code> into a reference to an …","Transform this <code>ArrayRefMut</code> into a reference to an …","Transform this <code>ArrayRefMut</code> into a mutable reference to an …","","","","","","","","","","Clone this <code>TensorMap</code>, cloning all the data and metadata …","Clone this block, cloning all the data and metadata …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Take the union of <code>self</code> with <code>other</code>.","Get the integer value of this <code>LabelValue</code> as a usize","Get the array for the values in this block","Get the array for the values in this block","Get the array for the values in this block","Get a mutable reference to the values in this block","","","","","","","","","","","","","","","","","","","","","","","","","","","","","call <code>mts_array_t.create</code> with a more convenient API","","call <code>mts_array_t.data</code> with a more convenient API","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","call <code>mts_array_t.move_samples_from</code> with a more convenient …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create an <code>mts_array_t</code> with all members set to null …","call <code>mts_array_t.origin</code> with a more convenient API","","","","call <code>mts_array_t.reshape</code> with a more convenient API","","call <code>mts_array_t.shape</code> with a more convenient API","","","call <code>mts_array_t.swap_axes</code> with a more convenient API","","","","","","","","","","","","","","","","","","","","","","","Error type used in metatensor","Storage for the last error coming from a Rust function","","","Check a pointer allocated by metatensor-core, returning an …","Check an <code>mts_status_t</code>, returning an error if is it not …","","","Error code from the metatensor-core C API","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Error message associated with the code","","","","","","Load the serialized tensor map from the given path.","Load a serialized <code>TensorMap</code> from a <code>buffer</code>.","Save the given tensor to a file.","Save the given <code>tensor</code> to an in-memory <code>buffer</code>."],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,6,27,11,12,13,27,12,13,11,12,12,11,12,12,17,6,6,19,19,19,19,19,19,19,20,39,40,29,19,43,44,11,12,13,3,23,24,1,18,17,6,20,39,40,29,19,43,44,11,12,13,3,23,24,1,18,17,6,0,0,20,11,13,3,23,24,1,18,20,11,13,3,23,24,1,18,3,18,17,6,19,20,27,13,20,27,13,27,13,18,17,29,20,19,6,20,20,3,3,3,0,1,20,29,19,11,12,13,3,3,23,24,1,18,17,6,20,39,40,29,19,43,44,11,12,13,3,3,3,3,3,23,24,1,18,17,6,20,19,11,18,18,17,18,17,3,3,20,20,20,39,40,29,19,43,44,11,12,13,3,23,24,1,18,17,6,20,39,40,19,19,43,44,23,24,19,0,20,3,20,19,20,19,19,19,19,39,40,43,44,23,24,27,13,20,20,29,19,12,13,3,1,6,39,40,43,44,23,24,3,20,18,17,6,1,27,13,18,17,6,27,13,20,20,1,39,40,43,44,23,24,27,13,11,12,12,11,12,12,20,11,13,3,23,24,1,18,3,19,18,20,39,40,29,19,43,44,11,12,13,3,23,24,1,18,17,6,20,39,40,29,19,43,44,11,12,13,3,23,24,1,18,17,6,20,39,40,29,19,43,44,11,12,13,3,23,24,1,18,17,6,20,3,18,17,6,17,0,0,0,0,0,0,48,37,36,45,16,48,37,36,45,16,48,37,36,45,16,48,37,36,45,16,16,36,16,16,16,16,16,48,37,36,45,16,48,37,36,45,16,16,45,36,48,37,36,45,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,16,16,16,45,16,16,16,16,16,36,16,16,48,37,36,45,16,48,37,36,45,16,48,37,36,45,16,48,37,36,45,16,36,0,0,8,8,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,[5,[[0,[2,[4,[3]]]]]]]],[[6,7,6],[[9,[8]]]],[[],10],[11,10],[12,10],[13,10],[[],10],[12,10],[13,10],[11,[[15,[14]]]],[12,[[15,[14]]]],[12,[[15,[14]]]],[11,16],[12,16],[12,16],[17,18],[6,18],[6,17],[[19,20],[[9,[18,8]]]],[[19,21],18],[[19,20],[[9,[21,8]]]],[[19,21],17],[19,[[22,[18]]]],[[19,20],[[9,[[22,[21]],8]]]],[19,[[22,[17]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],7],[20,20],[11,11],[13,13],[3,3],[23,23],[24,24],[1,1],[18,18],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,3],25],[18,[[22,[20]]]],[17,[[22,[20]]]],[6,[[22,[20]]]],[[19,[5,[7]]],[[9,[19,8]]]],[[20,[5,[3]]],26],[[],[[28,[27]]]],[13,[[28,[27]]]],[20,21],[[[5,[21]]],[[28,[27]]]],[[13,[5,[21]]],[[28,[27]]]],[[],[[5,[14]]]],[13,[[5,[14]]]],0,0,[29],[20],[19],[6],[[[22,[7]]],20],[[20,20],26],[[3,3],26],[[3,30],26],[[],26],0,[1,20],[[20,31],32],[[[29,[33]],31],32],[[19,31],32],[[11,31],32],[[12,31],32],[[13,31],32],[[3,31],32],[[3,31],32],[[23,31],32],[[24,31],32],[[1,31],32],[[18,31],32],[[17,31],32],[[6,31],32],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[21,3],[34,3],[35,3],[[]],[30,3],[[]],[[]],[[]],[[]],[[]],[[]],[36,20],[37,19],[16,11],[[18,7],[[38,[18]]]],[18,[[22,[7]]]],[[17,7],[[38,[17]]]],[18,39],[17,40],[[3,41]],[3,30],[[20,21],[[5,[3]]]],[[20,20,[38,[[5,[42]]]],[38,[[5,[42]]]]],[[9,[20,8]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[20],[[]],[[]],[19],[19],[[]],[[]],[[]],[[]],[19,37],0,[20,26],[3,35],[20,23],[19,43],[20,24],[19,44],[19,20],[[19,20,26],[[9,[19,8]]]],[[19,20,26],[[9,[19,8]]]],[39,21],[40,21],[43,21],[44,21],[23,21],[24,21],[[27,[5,[45]],[46,[21]]]],[[13,27,[5,[45]],[46,[21]]]],[20,[[22,[7]]]],[[[47,[7]],[5,[[47,[[0,[2,[4,[3]]]]]]]]],20],[48,29],[[20,[22,[6]]],[[9,[19,8]]]],[16,12],[[[22,[21]]],13],[30,3],[[[22,[7]]],1],[[27,20,[5,[20]],20],[[9,[6,8]]]],[39,38],[40,38],[43,38],[44,38],[23,38],[24,38],[[3,3],[[38,[25]]]],[[20,[5,[3]]],[[38,[21]]]],[18,20],[17,20],[6,20],[[1,21]],[[[5,[21]]]],[[13,[5,[21]]]],[18,20],[17,20],[6,20],[[],[[5,[21]]]],[13,[[5,[21]]]],[[],20],[20,21],[1,21],[39],[40],[43],[44],[23],[24],[[21,21]],[[13,21,21]],[11,10],[12,10],[12,10],[11,[[15,[14]]]],[12,[[15,[14]]]],[12,[[15,[14]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],49],[19,[[9,[19,8]]]],[18,[[9,[6,8]]]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[],50],[[20,20,[38,[[5,[42]]]],[38,[[5,[42]]]]],[[9,[20,8]]]],[3,21],[18,11],[17,11],[6,11],[17,12],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[48,48],[37,37],[36,36],[45,45],[16,16],[[]],[[]],[[]],[[]],[[]],0,0,[[16,[5,[21]]],[[9,[16,8]]]],0,[16,[[9,[[5,[14]],8]]]],0,0,[[48,31],32],[[37,31],32],[[36,31],32],[[45,31],32],[[16,31],32],[[]],[[]],[[]],[[]],[[]],[[[28,[27]]],16],0,0,[[]],[[]],[[]],[[]],[[]],[[16,16,[5,[45]],[46,[21]]],[[9,[8]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],16],[16,[[9,[51,8]]]],0,0,0,[[16,[5,[21]]],[[9,[8]]]],0,[16,[[9,[[5,[21]],8]]]],0,0,[[16,21,21],[[9,[8]]]],0,[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],50],[[],50],[[],50],[[],50],[[],50],0,0,0,[[]],[[]],[[],[[9,[52,8]]]],[53,[[9,[8]]]],[8,8],[[]],0,[[8,31],32],[[8,31],32],[[]],[[[28,[10]]],8],[[]],0,[[]],[[],49],[[],9],[[],9],[[],50],[[[55,[54]]],[[9,[19,8]]]],[[[5,[56]]],[[9,[19,8]]]],[[[55,[54]],19],[[9,[8]]]],[[19,[22,[56]]],[[9,[8]]]]],"c":[],"p":[[3,"LabelsBuilder"],[8,"Copy"],[3,"LabelValue"],[8,"Into"],[15,"slice"],[3,"TensorBlock"],[15,"str"],[3,"Error"],[4,"Result"],[8,"Any"],[3,"ArrayRef"],[3,"ArrayRefMut"],[3,"EmptyArray"],[15,"f64"],[6,"ArrayD"],[3,"mts_array_t"],[3,"TensorBlockRefMut"],[3,"TensorBlockRef"],[3,"TensorMap"],[3,"Labels"],[15,"usize"],[3,"Vec"],[3,"LabelsIter"],[3,"LabelsFixedSizeIter"],[4,"Ordering"],[15,"bool"],[8,"Array"],[3,"Box"],[3,"LazyMetadata"],[15,"i32"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[15,"u32"],[15,"isize"],[3,"mts_labels_t"],[3,"mts_tensormap_t"],[4,"Option"],[3,"GradientsIter"],[3,"GradientsMutIter"],[8,"Hasher"],[15,"i64"],[3,"TensorMapIter"],[3,"TensorMapIterMut"],[3,"mts_sample_mapping_t"],[3,"Range"],[15,"array"],[3,"mts_block_t"],[3,"String"],[3,"TypeId"],[6,"mts_data_origin_t"],[3,"NonNull"],[6,"mts_status_t"],[3,"Path"],[8,"AsRef"],[15,"u8"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
